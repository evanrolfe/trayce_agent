// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.13.0
// source: api/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DockerDogAgentClient is the client API for DockerDogAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DockerDogAgentClient interface {
	SendRequestObserved(ctx context.Context, in *RequestObserved, opts ...grpc.CallOption) (*Reply, error)
	SendAgentStarted(ctx context.Context, in *AgentStarted, opts ...grpc.CallOption) (*Reply, error)
}

type dockerDogAgentClient struct {
	cc grpc.ClientConnInterface
}

func NewDockerDogAgentClient(cc grpc.ClientConnInterface) DockerDogAgentClient {
	return &dockerDogAgentClient{cc}
}

func (c *dockerDogAgentClient) SendRequestObserved(ctx context.Context, in *RequestObserved, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/api.DockerDogAgent/SendRequestObserved", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerDogAgentClient) SendAgentStarted(ctx context.Context, in *AgentStarted, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/api.DockerDogAgent/SendAgentStarted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DockerDogAgentServer is the server API for DockerDogAgent service.
// All implementations must embed UnimplementedDockerDogAgentServer
// for forward compatibility
type DockerDogAgentServer interface {
	SendRequestObserved(context.Context, *RequestObserved) (*Reply, error)
	SendAgentStarted(context.Context, *AgentStarted) (*Reply, error)
	mustEmbedUnimplementedDockerDogAgentServer()
}

// UnimplementedDockerDogAgentServer must be embedded to have forward compatible implementations.
type UnimplementedDockerDogAgentServer struct {
}

func (UnimplementedDockerDogAgentServer) SendRequestObserved(context.Context, *RequestObserved) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRequestObserved not implemented")
}
func (UnimplementedDockerDogAgentServer) SendAgentStarted(context.Context, *AgentStarted) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAgentStarted not implemented")
}
func (UnimplementedDockerDogAgentServer) mustEmbedUnimplementedDockerDogAgentServer() {}

// UnsafeDockerDogAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DockerDogAgentServer will
// result in compilation errors.
type UnsafeDockerDogAgentServer interface {
	mustEmbedUnimplementedDockerDogAgentServer()
}

func RegisterDockerDogAgentServer(s grpc.ServiceRegistrar, srv DockerDogAgentServer) {
	s.RegisterService(&DockerDogAgent_ServiceDesc, srv)
}

func _DockerDogAgent_SendRequestObserved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestObserved)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerDogAgentServer).SendRequestObserved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DockerDogAgent/SendRequestObserved",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerDogAgentServer).SendRequestObserved(ctx, req.(*RequestObserved))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerDogAgent_SendAgentStarted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentStarted)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerDogAgentServer).SendAgentStarted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DockerDogAgent/SendAgentStarted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerDogAgentServer).SendAgentStarted(ctx, req.(*AgentStarted))
	}
	return interceptor(ctx, in, info, handler)
}

// DockerDogAgent_ServiceDesc is the grpc.ServiceDesc for DockerDogAgent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DockerDogAgent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.DockerDogAgent",
	HandlerType: (*DockerDogAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendRequestObserved",
			Handler:    _DockerDogAgent_SendRequestObserved_Handler,
		},
		{
			MethodName: "SendAgentStarted",
			Handler:    _DockerDogAgent_SendAgentStarted_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
